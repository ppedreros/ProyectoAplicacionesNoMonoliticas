version: '3.8'

services:
  app:
    build:
      context: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://alpes:alpes@db:5432/alpes
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./alpespartners:/app/alpespartners
      - ./migrations:/app/migrations
      - ./alembic.ini:/app/alembic.ini
    command: >
      sh -c "ls -la /app && pwd && alembic upgrade head &&
             cd /app/alpespartners && uvicorn main:app --host 0.0.0.0 --port 8000"

  db:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=alpes
      - POSTGRES_PASSWORD=alpes
      - POSTGRES_DB=alpes
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U alpes"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 5s
      timeout: 10s
      retries: 5
  kafka-setup:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      bash -c '
        echo "Esperando a que Kafka esté listo..."
        sleep 10
        
        echo "Creando tópicos para Tracking Service..."
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 --topic tracking.clicks
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 --topic tracking.conversiones
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 --topic tracking.atribuciones
        
        echo "Creando tópicos para Loyalty Service..."
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 --topic loyalty.embajadores.eventos
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 --topic loyalty.referidos.eventos
        
        echo "Listando todos los tópicos creados:"
        kafka-topics --list --bootstrap-server kafka:9092
        
        echo "Tópicos de Kafka configurados correctamente!"
      '
    restart: "no"


volumes:
  postgres_data: